#include <iostream>
#include <vector>
#include <fstream>
using namespace std;

double Calc(int num1, int num2) {
    if (num2 == 0) {
        throw "Деление на Нуль!";
    }
    return (double)num1 / num2;
}

void OpenFile(string filename) {
    ifstream file;
    try {
        file.open(filename);
        if (!file.is_open()) {
            throw runtime_error("Ошибка !!!");
        }
        cout << "Файл успешно открыт !!!" << endl;
        file.close();
    }
    catch (exception e) {
        cerr << "Ошибка: " << e.what() << endl;
    }
}

void IndMass(int size) {
    vector<int> array(size);
    int ind;
    cout << "Введите индекс элемента массива: " << size - 1;
    cin >> ind;

    try {
        if (ind >= size) {
            throw out_of_range("Выход за границы массива");
        }
        cout << "Значение элемента с индексом " << ind << ", " << array[ind] << endl;
    }
    catch (out_of_range e) {
        cerr << "Ошибка: " << e.what() << endl;
    }
}

class InvalidPasswordException : public invalid_argument {
public:
    InvalidPasswordException(const string& what_arg)
        : invalid_argument(what_arg) { }
};

class User {
public:
    User(int id, const string& name, const string& password) : id(id), name(name), password(password) {
        validatePassword();
    }
    void validatePassword(string Password) {
        if (Password.size() < 8) {
            throw InvalidPasswordException("Длина пароля должна быть не менее 8 символов");
        }
        bool has_upper = false, has_lower = false, has_digit = false, space = false;
        for (char c : Password) {
            if (isupper(c)) {
                has_upper = true;
            }
            else if (islower(c)) {
                has_lower = true;
            }
            else if (isdigit(c)) {
                has_digit = true;
            }
            for (int i = 0; i < Password.size(); i++) {
                if (Password[i] == ' ') {
                    space = true;
                    break;
                }
            }
        }
        if (!has_upper || !has_lower || !has_digit || space) {
            throw InvalidPasswordException("Пароль должен содержать хотя бы одну заглавную букву, одну строчную букву, одну цифру и без пробелов");
        }
    }
private:
    int id;
    string name;
    string password;
    
    void validatePassword() {
        if (password.size() < 8) {
            throw InvalidPasswordException("Длина пароля должна быть не менее 8 символов");
        }
        bool has_upper = false, has_lower = false, has_digit = false, space = false;
        for (char c : password) {
            if (isupper(c)) {
                has_upper = true;
            }
            else if (islower(c)) {
                has_lower = true;
            }
            else if (isdigit(c)) {
                has_digit = true;
            }
            for (int i = 0; i < password.size(); i++) {
                if (password[i] == ' ') {
                    space = true;
                    break;
                }
            }
        }
        if (!has_upper || !has_lower || !has_digit || space) {
            throw InvalidPasswordException("Пароль должен содержать хотя бы одну заглавную букву, одну строчную букву, одну цифру и без пробелов");
        }
    }
public:
    int getId() const {
        return id;
    }

    const string& getName() const {
        return name;
    }

    const string& getPassword() const {
        return password;
    }
};
class UserNotFoundException : public runtime_error {
public:
    string err;
    UserNotFoundException(const string& what_arg)
        : runtime_error(what_arg) { }
};

bool UserExists(const vector<User>& users, int id) {
    for (const User& user : users) {
        if (user.getId() == id) {
            return true;
        }
    }
    throw UserNotFoundException("Пользователь с указанным ID не найден");
}

bool get_id() {
    cin.exceptions(istream::failbit);
    int id_to_find;
    try {
        cin >> id_to_find;
    }
    catch (istream::failure) {
        throw UserNotFoundException("ID создан из цифр а не букв");
    }
    return id_to_find;
}

void ChangePassword(const vector<User>& users, int id) {
    string newpassword;
    string firstpassword;

    if (UserExists(users, get_id())) {
        cout << "ведите старый пароль: ";
        cin >> firstpassword;
        cout << endl;
        if(users[id].getPassword() == firstpassword){
        }
    }
    else {
        cout << "Пользователь с указанным ID не найден" << endl;
    }
}

int main()
{
    setlocale(LC_ALL, "");
    vector<User> users = {
        User(1, "User1", "Password1"),
        User(2, "User2", "Password2"),
        User(3, "User3", "Password3")
    };

    int id_to_find;
    cout << "Введите ID пользователя для поиска: ";
    try {
        
        if (UserExists(users, get_id())) {
            cout << "Пользователь с указанным ID найден" << endl;
        }
        else {
            cout << "Пользователь с указанным ID не найден" << endl;
        }
    }
    catch (const UserNotFoundException& e) {
        cout << "Ошибка: " << e.what() << endl;
    }
    
}
